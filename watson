#!/usr/bin/env python

# Copyright (C) k736, inc. All Rights Reserved.
# Unauthorized copying or redistribution of this file is strictly prohibited.

"""
Watson

- Periodically GET a URL
- Tether to the directory if GET was successful
"""

import urllib2
from argparse import ArgumentParser

from proton.reactor import Reactor

from datawire import Tether


class LivenessByHTTPGet(object):

    def __init__(self, url):
        self.url = url
        self.okay = set([200])
        if self.url.startswith("file:/"):
            self.okay.add(None)
        else:
            self.url += "/live"

    def __call__(self):
        try:
            res = urllib2.urlopen(self.url)
            if res.getcode() in self.okay:
                return True
        except urllib2.URLError:
            pass
        return False


class Watson(object):

    def __init__(self, args, testLiveness):
        self.tetherArgs = args.directory, args.address, args.url
        self.tether = None
        self.testingPeriod = args.period
        self.testLiveness = testLiveness

        self.url = args.url

    def on_reactor_init(self, event):
        event.reactor.schedule(0, self)

    def on_timer_task(self, event):
        if self.testLiveness():
            # Alive
            if self.tether is None:
                # Just came to life
                print self.url, "DEAD->LIVE"
                self.tether = Tether(*self.tetherArgs)
                self.tether.start(event.reactor)
        else:
            # Dead
            if self.tether is not None:
                # Just died
                print self.url, "LIVE->DEAD"
                self.tether.stop(event.reactor)
                self.tether = None
        event.reactor.schedule(self.testingPeriod, self)


def main():
    parser = ArgumentParser()
    parser.add_argument("-d", "--directory", default="//localhost/directory")
    parser.add_argument("address", help="service address")
    parser.add_argument("url", help="service URL (target)")
    parser.add_argument("period", type=int, help="seconds between liveness checks")
    args = parser.parse_args()

    checker = LivenessByHTTPGet(args.url)

    Reactor(Watson(args, checker)).run()


if __name__ == "__main__":
    main()
