#!/usr/bin/env python

# Copyright (C) k736, inc. All Rights Reserved.
# Unauthorized copying or redistribution of this file is strictly prohibited.

"""
Watson

- Periodically GET a URL
- Tether to the directory if GET was successful
"""

import urllib2
from argparse import ArgumentParser
from ConfigParser import SafeConfigParser as ConfigParser

from proton.reactor import Reactor

from datawire import Tether


class LivenessByHTTPGet(object):

    def __init__(self, url):
        self.url = url
        self.okay = set([200])
        if self.url.startswith("file:/"):
            self.okay.add(None)
        else:
            self.url += "/liveness_check"

    def __call__(self):
        try:
            res = urllib2.urlopen(self.url)
            if res.getcode() in self.okay:
                return True
        except urllib2.URLError:
            pass
        return False


class Watson(object):

    def __init__(self, args, testLiveness):
        self.tetherArgs = args.directory, args.address, args.url
        self.tether = None
        self.testingPeriod = args.period
        self.testLiveness = testLiveness

        self.url = args.url

    def on_reactor_init(self, event):
        event.reactor.schedule(0, self)

    def on_timer_task(self, event):
        if self.testLiveness():
            # Alive
            if self.tether is None:
                # Just came to life
                print self.url, "DEAD->LIVE"
                self.tether = Tether(*self.tetherArgs)
                self.tether.start(event.reactor)
        else:
            # Dead
            if self.tether is not None:
                # Just died
                print self.url, "LIVE->DEAD"
                self.tether.stop(event.reactor)
                self.tether = None
        event.reactor.schedule(self.testingPeriod, self)


def main():
    parser = ArgumentParser(add_help=False)
    parser.add_argument("-c", "--config", help="read from config file (no other args)", metavar="FILE")
    args, remaining_argv = parser.parse_known_args()

    if args.config:
        if remaining_argv:
            parser.error("config file, if included, must be the only argument")
            return  # Unreachable
        config = ConfigParser()
        config.read(args.config)
        args.directory = config.get("Watson", "directory")
        args.address = config.get("Watson", "address")
        args.url = config.get("Watson", "url")
        args.period = config.getint("Watson", "period")
    else:
        parser = ArgumentParser(parents=[parser])
        parser.add_argument("-d", "--directory", default="//localhost/directory")
        parser.add_argument("address", help="service address")
        parser.add_argument("url", help="service URL (target)")
        parser.add_argument("period", type=int, help="seconds between liveness checks")
        args = parser.parse_args()

    checker = LivenessByHTTPGet(args.url)

    Reactor(Watson(args, checker)).run()


if __name__ == "__main__":
    main()
