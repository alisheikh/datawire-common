#!/usr/bin/env python
import random, sys, os, argparse
from common import *

from service import Updater, get_base_argparser

class Alerter(Updater):

    def __init__(self, host, port, trace=None):
        Updater.__init__(self, self)
        self.host = host
        self.port = port
        self.trace = trace
        self.statuses = {}
        self.decoder = MessageDecoder(self)
        self.handlers.append(self.decoder)

    def on_start(self, drv):
        drv.acceptor(host, port)

    def update(self):
        return self.statuses

    def on_transport_closed(self, event):
        event.connection.free()
        event.transport.unbind()

    def on_message(self, rcv, msg):
        if self.trace: self.log("Rcvd: %r" % msg)
        self.statuses[rcv.target.address] = (msg.properties, msg.body)
        self.updated()

parser = argparse.ArgumentParser(parents=[get_base_argparser()]))
args = parser.parse_args()

trace = args.trace
host = args.host
port = args.port

drv = Driver(Alerter(host, port, trace))
drv.run()
