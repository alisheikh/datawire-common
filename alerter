#!/usr/bin/env python
import random, sys, os
from common import *

from service import Updater

class Alerter(Updater):

    def __init__(self, host, port, trace=None):
        Updater.__init__(self, self)
        self.host = host
        self.port = port
        self.trace = trace
        self.statuses = {}
        self.decoder = MessageDecoder(self)
        self.handlers.append(self.decoder)

    def on_start(self, drv):
        drv.acceptor(host, port)

    def update(self):
        return self.statuses

    def on_transport_closed(self, event):
        event.connection.free()
        event.transport.unbind()

    def on_message(self, rcv, msg):
        if self.trace: self.log("Rcvd: %r" % msg)
        self.statuses[rcv.target.address] = (msg.properties, msg.body)
        self.updated()

switches = [a for a in sys.argv[1:] if a.startswith("-")]
args = [a for a in sys.argv[1:] if not a.startswith("-")]

trace = "-t" in switches

host = args.pop(0) if args and not args[0].isdigit() else "localhost"
port = int(args.pop(0)) if args else 5672

drv = Driver(Alerter(host, port, trace))
drv.run()
