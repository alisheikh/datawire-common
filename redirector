#!/usr/bin/env python
import random, sys, os
from common import *

class Redirector(Handshaker):

    def __init__(self, host, port, trace=None):
        self.host = host
        self.port = port
        self.trace = trace
        self.hosts = []
        self.count = 0

    def log(self, msg):
        sys.stderr.write("%s\n" % msg)
        sys.stderr.flush()

    def on_start(self, drv):
        drv.acceptor(self.host, self.port)

    def choose(self):
        choice = self.hosts[self.count % len(self.hosts)]
        self.count += 1
        return choice

    def on_connection_init(self, event):
        conn = event.context
        conn.finalizer = None

    def on_connection_remote_open(self, event):
        conn = event.context

        props = conn.remote_properties
        if props and "compute-node" in props:
            self.hosts.append(conn)
            conn.finalizer = self.on_compute_node_final
            self.log("Adding compute node %s" % conn.remote_properties["compute-node"])
        else:
            node = self.choose()
            host, port = node.remote_properties["compute-node"]
            self.log("Redirecting to %s:%s" % (host, port))
            conn.condition = Condition("amqp:connection:redirect", None,
                                       {symbol("network-host"): host,
                                        symbol("port"): port})
            conn.close()

    def on_compute_node_final(self, conn):
        self.log("Removing compute node %s" % conn.remote_properties["compute-node"])
        self.hosts.remove(conn)

    def on_transport_closed(self, event):
        transport = event.context
        conn = event.context.connection
        if conn.finalizer:
            conn.finalizer(conn)


switches = [a for a in sys.argv[1:] if a.startswith("-")]
args = [a for a in sys.argv[1:] if not a.startswith("-")]

trace = "-t" in switches

host = args.pop(0) if args and not args[0].isdigit() else "localhost"
port = int(args.pop(0)) if args else 5672

drv = Driver(Redirector(host, port, trace))
drv.run()
