#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
import sys
from common import *
from service import Tether, Service, Updater

class Store:

    def __init__(self):
        self.serial = 0
        self.messages = []
        self.history = 1000
        self.limit = self.history*2

    def add(self, obj):
        self.messages.append(obj)
        n = len(self.messages)
        if n > self.limit:
            delta = n - self.history
            del self.messages[:delta]
            self.serial += delta

    def max(self):
        return self.serial + len(self.messages)

    def min(self):
        return self.serial

    def get(self, serial):
        return self.messages[serial - self.serial]

class IncrementalUpdater(Updater):

    def __init__(self, chat):
        Updater.__init__(self, chat)
        self.store = chat.store

    def start(self, address):
        parts = address.split("?", 1)
        if len(parts) > 1:
            try:
                n = int(parts[1])
                if n < 0:
                    n = self.store.max() + n
                return n
            except ValueError:
                return self.serial

    def update(self, snd):
        serial = max(snd.serial, self.store.min())
        self.log("starting at %s" % serial)
        while serial < self.store.max():
            msg = self.store.get(serial)
            dlv = snd.delivery("%s" % serial)
            snd.send(msg)
            dlv.settle()
            serial += 1
            snd.serial = serial
            self.log("Sent: %r", msg)

class Chat(Service):

    def __init__(self, director, host, port, trace=None):
        Service.__init__(self, director, "chat", host, port, trace)
        self.store = Store()
        self.updater = IncrementalUpdater(self)
        self.handlers.append(self.updater)

    def on_message(self, rcv, msg):
        self.log("Rcvd: %r", msg)
        self.store.add(msg.encode())
        self.updater.updated()

switches = [a for a in sys.argv[1:] if a.startswith("-")]
args = [a for a in sys.argv[1:] if not a.startswith("-")]

trace = "-t" in switches

host = args.pop(0) if args and not args[0].isdigit() else "localhost"
port = int(args.pop(0)) if args else 5672

drv = Driver(Chat("localhost", host, port, trace))
drv.run()
