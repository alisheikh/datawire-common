#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
import os, sys, time, psutil
from common import *

class Client(Handler):

    def __init__(self):
        self.messages = []
        self.sent = 0
        self.scratch = Message()
        self.handlers = [pool, self]

    def on_connection_remote_close(self, event):
        conn = event.context
        if conn.remote_condition and conn.remote_condition.name == "amqp:connection:redirect":
            info = conn.remote_condition.info
            host = info["network-host"]
            port = info["port"]
            address = str("//%s:%s" % (host, port))
            print "redirecting to %s" % address
            pool.outgoing(address)
            conn.close()

    def on_link_remote_open(self, event):
        link = event.context
        if link.is_sender:
            link.next_msg = None

    def on_link_flow(self, event):
        link = event.context
        if link.is_sender and link.credit:
            self.on_credit(link)

    def on_link_final(self, event):
        link = event.context
        if link.is_sender:
            del link.next_msg

    def on_credit(self, snd):
        if snd.next_msg is None:
            snd.next_msg = drv.now + 1
            drv.schedule(lambda: self.send(snd), 0.25)

    def send(self, link):
        if not hasattr(link, "next_msg"): return
        dlv = link.delivery("generate-%s" % self.sent)
        self.scratch.clear()
        self.scratch.body = [(u"cpu", time.time(), psutil.cpu_percent(None))]
        link.send(self.scratch.encode())
        dlv.settle()
        print "Sent:", self.scratch
        self.sent += 1
        link.next_msg = None

switches = [a for a in sys.argv[1:] if a.startswith("-")]
args = [a for a in sys.argv[1:] if not a.startswith("-")]

address = args.pop(0) if args and args[0].startswith("/") else "//localhost"

coll = Collector()
pool = Pool(coll)
pool.outgoing(address)

client = Client()

drv = Driver(coll, client)
drv.run()
