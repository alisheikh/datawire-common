


Git Design Notes
================

## User scenario

Fred creates an analytic package in his local git repo. He adds
Kinetic as a remote to his git repo. Fred pushes his code to Kinetic
using git push.

## Requirements

- Use HTTPS for git pull/push
- Require authentication for all repo access
- Use same password to access all of Kinetic (git, web app)

## Design

- Use
  [git-http-backend](https://www.kernel.org/pub/software/scm/git/docs/git-http-backend.html)
  with Apache web server. This provides HTTPS access to git repo.
- Use
  [mod_auth_external](https://code.google.com/p/mod-auth-external/)
  with Apache to handle authentication.
- Write a custom external authentication provider that is called by
  mod_auth_external. 
- The custom external auth provider will also do authorization by
  parsing the URI
  - The documentation recommends against doing this but doesn't
    explain clearly why it's a bad idea (see
    https://code.google.com/p/mod-auth-external/wiki/AuthHowTo).

AuthZ
- Set AuthExternalContext 


## Alternatives

- Nginx
 - https://gist.github.com/massar/9399764
 - Grack https://github.com/schacon/grack

- Authentication options
 - set REMOTE_USER environment variable	somehow
 - write custom apache module for authentication (this will be a good
   performance optimization)
 - use ldap

- GitLab
  - provides social activity stream, wiki, etc.
  - requires you to use their auth system so SSO across kinetic would be complicated
  - written in rails
