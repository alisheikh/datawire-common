#!/usr/bin/env python
import random, sys, os
from common import *

class GraphiteSelectable:

    def __init__(self, sock, sendq):
        self.sock = sock
        self.sendq = sendq
        self.input = ""
        self._closed = False
        self.message = Message()

    def fileno(self):
        return self.sock.fileno()

    def reading(self):
        return not self._closed

    def writing(self):
        return False

    def readable(self):
        bytes = self.sock.recv(64*1024)
        if not bytes:
            self._closed = True
        else:
            self.input += bytes
        self.process()

    def process(self):
        lines = self.input.split("\n")
        if lines:
            self.input = lines.pop()
        samples = []
        for line in lines:
            try:
                key, value, tstamp = self.parse_line(line)
            except ValueError, e:
                print "warning", e
                continue
            samples.append((key, value, tstamp))
        if samples:
            self.message.body = samples
            self.sendq.put(self.message)

    def parse_line(self, line):
        parts = line.split()
        if len(parts) != 3: raise ValueError("bad line %r" % line)
        key, value, tstamp = parts
        try:
            value = int(value)
        except ValueError:
            value = float(value)
        tstamp = float(tstamp)
        return key, value, timestamp(tstamp)

    def tick(self, now):
        return None

    def closed(self):
        if self._closed:
            self.sock.close()
            return True
        else:
            return False

class Bridge(Handler):

    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.sendq = SendQueue('//test.datawire.io/graphite')
        self.handlers = [self, self.sendq]

    def log(self, msg):
        sys.stderr.write("%s\n" % msg)
        sys.stderr.flush()

    def on_start(self, drv):
        drv.acceptor(self.host, self.port, self)

    def on_accept(self, sock, addr):
        drv.add(GraphiteSelectable(sock, self.sendq))

drv = Driver(Bridge("localhost", 2003))
drv.run()
