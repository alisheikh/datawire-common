Barker
######

Barker is a set of microservices that mimics sending a tweet ("bark")
to a set of followers. Barker is intended to illustrate how to design
and connect a set of microservices using Datawire.

Barker Quickstart
=================

Barker includes a launch script that will start all the Barker
microservices::

  python barker/launch.py

Visit barker/webui/index.html in your browser to see the Barker
UI. You'll see a set of barks continuously scroll by; these are
automatically generated by the ``autobark.py`` client. You can also
type a bark into the UI, and you'll see it appear in set of barks.

Barker also includes a basic monitoring setup. You can start the
monitoring with the monitoring launch script::

  python monitoring/launch.py

Visit monitoring/index.html in your browser, and you'll see two
real time graphs giving visibility into the state of the system.

Architecture
============

The architectural design of Barker is influenced by this `article
about Twitter scalability
<http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html>`_. This
design is also very generalizable to other types of processing
problems, and resembles the `LMAX architecture
<http://martinfowler.com/articles/lmax.html>`_.



outbox -> bizlogic -> inbox -> client


Barker Slow Start
=================

Now that you have a grasp of the Barker archtiecture, let's go through
Barker in more detail. The launch script starts a number of different
microservices locally, each operating a different host port. The main
services that are started are the following:

* directory, which provides service location
* a manifold that functions as the "inbox"
* an instance of business logic
* three manifold instances that function as the "outbox"
* five autobark instances that simulate multiple tweeters




- bizlogic failover





UI and Monitoring
=================

Barker relies on the ``proton.js`` library to stream data directly
into your browser, over AMQP on WebSockets. This is used in both the
Barker UI, as well as the monitoring dashboards.

The ``proton.js`` library should be considered experimental, as the
Python reactive API is not yet implemented in ``proton.js``.









